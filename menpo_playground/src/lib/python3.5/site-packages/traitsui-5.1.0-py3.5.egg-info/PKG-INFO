Metadata-Version: 1.1
Name: traitsui
Version: 5.1.0
Summary: traitsui: traits-capable user interfaces
Home-page: https://docs.enthought.com/traitsui
Author: ETS Developers
Author-email: enthought-dev@enthought.com
License: BSD
Download-URL: https://github.com/enthought/traitsui
Description: ============================================
        TraitsUI: Traits-capable windowing framework
        ============================================
        
        .. image:: https://travis-ci.org/enthought/traitsui.svg?branch=master
           :target: https://travis-ci.org/enthought/traitsui
        
        .. image:: https://ci.appveyor.com/api/projects/status/gkcirica40xx2qyk/branch/master?svg=true
           :target: https://ci.appveyor.com/project/itziakos/traitsui/branch/master
        
        .. image:: https://codecov.io/github/enthought/traitsui/coverage.svg?branch=master
           :target: https://codecov.io/github/enthought/traitsui?branch=master
        
        The TraitsUI project contains a toolkit-independent GUI abstraction layer,
        which is used to support the "visualization" features of the
        `Traits <http://github.com/enthought/traits>`_ package.
        Thus, you can write model in terms of the Traits API and specify a GUI
        in terms of the primitives supplied by TraitsUI (views, items, editors,
        etc.), and let TraitsUI and your selected toolkit and back-end take care of
        the details of displaying them.
        
        The following GUI backends are supported:
        
        - wxPython
        - PyQt
        - PySide
        
        **Warning:** In TraitsUI version 5.0 the default GUI backend will change from
        ``wx`` to ``qt4``.
        
        Example
        -------
        
        Given a Traits model like the following::
        
            from traits.api import HasTraits, Str, Range, Enum
        
            class Person(HasTraits):
        
                name = Str('Jane Doe')
        
                age = Range(low=0)
        
                gender = Enum('female', 'male')
        
            person = Person(age=30)
        
        we can use TraitsUI to specify a and display a GUI view::
        
            from traitsui.api import Item, RangeEditor, View
        
            person_view = View(
                Item('name'),
                Item('gender'),
                Item('age', editor=RangeEditor(mode='spinner')),
                buttons=['OK', 'Cancel'],
                resizable=True,
            )
        
            person.configure_traits(view=person_view)
        
        which creates a GUI which looks like this:
        
        .. image:: https://raw.github.com/enthought/traitsui/master/README_example.png
        
        Prerequisites
        -------------
        
        If you want to run traitsui, you must also install:
        
        * `traits <https://github.com/enthought/traits>`_
        * `pyface <https://github.com/enthought/pyface>`_
        
Platform: Windows
Platform: Linux
Platform: Mac OS-X
Platform: Unix
Platform: Solaris
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: OS Independent
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
